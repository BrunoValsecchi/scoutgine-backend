# Generated by Django 4.2.21 on 2025-05-21 02:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Equipo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('nombre_corto', models.CharField(blank=True, max_length=50, null=True)),
                ('liga', models.CharField(default='Liga Profesional', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Torneo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50)),
                ('zona', models.CharField(blank=True, max_length=20, null=True)),
                ('temporada', models.CharField(max_length=20)),
            ],
            options={
                'unique_together': {('nombre', 'zona', 'temporada')},
            },
        ),
        migrations.CreateModel(
            name='Jugador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100)),
                ('posicion', models.CharField(max_length=50)),
                ('pais', models.CharField(blank=True, max_length=50, null=True)),
                ('dorsal', models.PositiveIntegerField(blank=True, null=True)),
                ('edad', models.PositiveIntegerField(blank=True, null=True)),
                ('altura', models.FloatField(blank=True, max_length=20, null=True)),
                ('valor', models.PositiveIntegerField(blank=True, null=True)),
                ('fecha_actualizacion', models.DateTimeField(blank=True, null=True)),
                ('equipo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.equipo')),
            ],
        ),
        migrations.CreateModel(
            name='EstadisticasJugador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=255)),
                ('tipo', models.CharField(choices=[('GK', 'Arquero'), ('RB', 'Lateral Derecho'), ('CB', 'Defensor Central'), ('LB', 'Lateral Izquierdo'), ('Defender', 'Defensor'), ('Midfielder', 'Mediocampista'), ('DM', 'Mediocampista Defensivo'), ('CM', 'Mediocampista Central'), ('RM', 'Mediocampista Derecho'), ('LM', 'Mediocampista Izquierdo'), ('AM', 'Mediocampista Ofensivo'), ('RW', 'Extremo Derecho'), ('LW', 'Extremo Izquierdo'), ('Attacker', 'Delantero'), ('ST', 'Delantero')], max_length=20)),
                ('saves', models.FloatField(blank=True, null=True)),
                ('save_percentage', models.FloatField(blank=True, null=True)),
                ('goals_conceded', models.FloatField(blank=True, null=True)),
                ('goals_prevented', models.FloatField(blank=True, null=True)),
                ('clean_sheets', models.IntegerField(blank=True, null=True)),
                ('error_led_to_goal', models.IntegerField(blank=True, null=True)),
                ('high_claim', models.IntegerField(blank=True, null=True)),
                ('pass_accuracy', models.FloatField(blank=True, null=True)),
                ('accurate_long_balls', models.FloatField(blank=True, null=True)),
                ('long_ball_accuracy', models.FloatField(blank=True, null=True)),
                ('goals', models.FloatField(blank=True, null=True)),
                ('expected_goals_xg', models.FloatField(blank=True, null=True)),
                ('xg_on_target_xgot', models.FloatField(blank=True, null=True)),
                ('non_penalty_xg', models.FloatField(blank=True, null=True)),
                ('shots', models.IntegerField(blank=True, null=True)),
                ('shots_on_target', models.IntegerField(blank=True, null=True)),
                ('assists', models.FloatField(blank=True, null=True)),
                ('expected_assists_xa', models.FloatField(blank=True, null=True)),
                ('successful_passes', models.IntegerField(blank=True, null=True)),
                ('pass_accuracy_outfield', models.FloatField(blank=True, null=True)),
                ('accurate_long_balls_outfield', models.FloatField(blank=True, null=True)),
                ('long_ball_accuracy_outfield', models.FloatField(blank=True, null=True)),
                ('chances_created', models.IntegerField(blank=True, null=True)),
                ('successful_crosses', models.IntegerField(blank=True, null=True)),
                ('cross_accuracy', models.FloatField(blank=True, null=True)),
                ('successful_dribbles', models.IntegerField(blank=True, null=True)),
                ('dribble_success', models.FloatField(blank=True, null=True)),
                ('touches', models.IntegerField(blank=True, null=True)),
                ('touches_in_opposition_box', models.IntegerField(blank=True, null=True)),
                ('dispossessed', models.IntegerField(blank=True, null=True)),
                ('fouls_won', models.IntegerField(blank=True, null=True)),
                ('penalties_awarded', models.IntegerField(blank=True, null=True)),
                ('tackles_won', models.IntegerField(blank=True, null=True)),
                ('tackles_won_percentage', models.FloatField(blank=True, null=True)),
                ('duels_won', models.IntegerField(blank=True, null=True)),
                ('duels_won_percentage', models.FloatField(blank=True, null=True)),
                ('aerial_duels_won', models.IntegerField(blank=True, null=True)),
                ('aerial_duels_won_percentage', models.FloatField(blank=True, null=True)),
                ('interceptions', models.IntegerField(blank=True, null=True)),
                ('blocked', models.IntegerField(blank=True, null=True)),
                ('fouls_committed', models.IntegerField(blank=True, null=True)),
                ('recoveries', models.IntegerField(blank=True, null=True)),
                ('possession_won_final_3rd', models.IntegerField(blank=True, null=True)),
                ('dribbled_past', models.IntegerField(blank=True, null=True)),
                ('yellow_cards', models.IntegerField(blank=True, null=True)),
                ('red_cards', models.IntegerField(blank=True, null=True)),
                ('jugador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.jugador')),
            ],
        ),
        migrations.CreateModel(
            name='EstadisticasEquipo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fotmob_rating', models.FloatField(blank=True, max_length=10, null=True)),
                ('goals_per_match', models.PositiveIntegerField(blank=True, null=True)),
                ('goals_conceded_per_match', models.FloatField(blank=True, null=True)),
                ('average_possession', models.CharField(blank=True, max_length=10, null=True)),
                ('clean_sheets', models.PositiveIntegerField(blank=True, null=True)),
                ('expected_goals_xg', models.FloatField(blank=True, max_length=10, null=True)),
                ('shots_on_target_per_match', models.FloatField(blank=True, null=True)),
                ('big_chances', models.PositiveIntegerField(blank=True, null=True)),
                ('big_chances_missed', models.PositiveIntegerField(blank=True, null=True)),
                ('accurate_passes_per_match', models.FloatField(blank=True, null=True)),
                ('accurate_long_balls_per_match', models.FloatField(blank=True, null=True)),
                ('accurate_crosses_per_match', models.FloatField(blank=True, null=True)),
                ('penalties_awarded', models.PositiveIntegerField(blank=True, null=True)),
                ('touches_in_opposition_box', models.PositiveIntegerField(blank=True, null=True)),
                ('corners', models.PositiveIntegerField(blank=True, null=True)),
                ('xg_conceded', models.FloatField(blank=True, null=True)),
                ('interceptions_per_match', models.PositiveIntegerField(blank=True, null=True)),
                ('successful_tackles_per_match', models.FloatField(blank=True, null=True)),
                ('clearances_per_match', models.FloatField(blank=True, null=True)),
                ('possession_won_final_3rd_per_match', models.FloatField(blank=True, null=True)),
                ('saves_per_match', models.FloatField(blank=True, null=True)),
                ('fouls_per_match', models.FloatField(blank=True, null=True)),
                ('yellow_cards', models.PositiveIntegerField(blank=True, null=True)),
                ('red_cards', models.PositiveIntegerField(blank=True, null=True)),
                ('equipo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.equipo')),
            ],
        ),
        migrations.CreateModel(
            name='Posicion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posicion', models.IntegerField()),
                ('partidos_jugados', models.IntegerField()),
                ('partidos_ganados', models.IntegerField()),
                ('partidos_empatados', models.IntegerField()),
                ('partidos_perdidos', models.IntegerField()),
                ('goles_a_favor', models.IntegerField()),
                ('goles_en_contra', models.IntegerField()),
                ('forma', models.CharField(blank=True, max_length=15, null=True)),
                ('proximo_rival', models.CharField(blank=True, max_length=100, null=True)),
                ('equipo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.equipo')),
                ('torneo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.torneo')),
            ],
            options={
                'unique_together': {('torneo', 'equipo')},
            },
        ),
    ]
