import wikipedia
import re
from django.core.cache import cache
from .models import Equipo

# Configurar Wikipedia en espa√±ol
wikipedia.set_lang("es")

def limpiar_texto(texto):
    """Limpia el texto de Wikipedia removiendo referencias y caracteres extra√±os"""
    if not texto:
        return ""
    
    # Remover referencias como [1], [2], etc.
    texto = re.sub(r'\[\d+\]', '', texto)
    
    # Remover m√∫ltiples espacios
    texto = re.sub(r'\s+', ' ', texto)
    

    return texto.strip()

def obtener_info_wikipedia(equipo):
    """Obtiene informaci√≥n de Wikipedia para un equipo espec√≠fico"""
    # Usar cache para evitar consultas repetidas
    cache_key = f"wikipedia_{equipo.id}"
    cached_info = cache.get(cache_key)
    
    if cached_info:
        print(f"üìã Info de {equipo.nombre} desde cache")
        return cached_info
    
    print(f"üîç Buscando info de {equipo.nombre} en Wikipedia...")
    
    # Mapeo de nombres de equipos para mejores b√∫squedas
    busquedas = [
        equipo.nombre,
        f"Club Atl√©tico {equipo.nombre}",
        f"Club {equipo.nombre}",
        f"{equipo.nombre} f√∫tbol",
        f"{equipo.nombre} Argentina"
    ]
    
    # Busquedas espec√≠ficas para equipos conocidos
    mapeo_equipos = {
        'Boca Juniors': 'Club Atl√©tico Boca Juniors',
        'River Plate': 'Club Atl√©tico River Plate',
        'Racing Club': 'Racing Club de Avellaneda',
        'Independiente': 'Club Atl√©tico Independiente',
        'San Lorenzo': 'Club Atl√©tico San Lorenzo de Almagro',
        'Estudiantes': 'Estudiantes de La Plata',
        'Gimnasia': 'Club de Gimnasia y Esgrima La Plata',
        'Lan√∫s': 'Club Atl√©tico Lan√∫s',
        'Banfield': 'Club Atl√©tico Banfield',
        'Hurac√°n': 'Club Atl√©tico Hurac√°n',
        'V√©lez': 'Club Atl√©tico V√©lez Sarsfield',
        'Newells': "Newell's Old Boys",
        'Rosario Central': 'Club Atl√©tico Rosario Central',
        'Talleres': 'Club Atl√©tico Talleres',
        'Belgrano': 'Club Atl√©tico Belgrano',
        'Godoy Cruz': 'Club Deportivo Godoy Cruz Antonio Tomba',
        'Platense': 'Club Atl√©tico Platense',
        'Arsenal': 'Arsenal de Sarand√≠',
        'Tigre': 'Club Atl√©tico Tigre',
        'Defensa y Justicia': 'Club Social y Deportivo Defensa y Justicia',
        'Col√≥n': 'Club Atl√©tico Col√≥n',
        'Uni√≥n': 'Club Atl√©tico Uni√≥n',
        'Central C√≥rdoba': 'Club Atl√©tico Central C√≥rdoba',
        'Sarmiento': 'Club Atl√©tico Sarmiento',
        'Aldosivi': 'Club Atl√©tico Aldosivi',
        'Patronato': 'Club Atl√©tico Patronato',
    }
    
    # Agregar b√∫squeda espec√≠fica si existe en el mapeo
    nombre_simple = equipo.nombre.replace('Club Atl√©tico ', '').replace('Club ', '')
    if nombre_simple in mapeo_equipos:
        busquedas.insert(0, mapeo_equipos[nombre_simple])
    
    info_equipo = {
        'resumen': '',
        'url': '',
        'fundacion': '',
        'estadio': '',
        'error': None
    }
    
    for busqueda in busquedas:
        try:
            print(f"üîé Intentando: {busqueda}")
            
            # Buscar p√°ginas relacionadas
            resultados = wikipedia.search(busqueda, results=3)
            
            if not resultados:
                continue
                
            # Intentar obtener la p√°gina principal
            pagina = wikipedia.page(resultados[0])
            
            # Verificar que sea relevante (contiene palabras clave de f√∫tbol)
            if any(keyword in pagina.content.lower() for keyword in ['f√∫tbol', 'football', 'club', 'equipo', 'argentina', 'liga']):
                info_equipo['resumen'] = limpiar_texto(pagina.summary)
                info_equipo['url'] = pagina.url
                
                # Extraer informaci√≥n adicional del contenido
                contenido = pagina.content.lower()
                
                # Buscar a√±o de fundaci√≥n
                fundacion_match = re.search(r'fundad[oa].{0,20}(\d{4})', contenido)
                if fundacion_match:
                    info_equipo['fundacion'] = fundacion_match.group(1)
                
                # Buscar estadio
                estadio_match = re.search(r'estadio.{0,50}([A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫\s]+)', contenido)
                if estadio_match:
                    estadio = estadio_match.group(1).strip()
                    if len(estadio) < 50:  # Evitar texto muy largo
                        info_equipo['estadio'] = estadio
                
                print(f"‚úÖ Info encontrada para {equipo.nombre}")
                break
                
        except wikipedia.exceptions.DisambiguationError as e:
            # Si hay desambiguaci√≥n, intentar con la primera opci√≥n
            try:
                if e.options:
                    pagina = wikipedia.page(e.options[0])
                    info_equipo['resumen'] = limpiar_texto(pagina.summary)
                    info_equipo['url'] = pagina.url
                    print(f"‚úÖ Info encontrada (desambiguaci√≥n) para {equipo.nombre}")
                    break
            except:
                continue
                
        except wikipedia.exceptions.PageError:
            continue
            
        except Exception as e:
            print(f"‚ùå Error con {busqueda}: {e}")
            continue
    
    if not info_equipo['resumen']:
        info_equipo['error'] = f"No se encontr√≥ informaci√≥n de Wikipedia para {equipo.nombre}"
        print(f"‚ùå No se encontr√≥ info para {equipo.nombre}")
    
    # Guardar en cache por 1 d√≠a
    cache.set(cache_key, info_equipo, 86400)
    
    return info_equipo

def obtener_info_todos_equipos():
    """Obtiene informaci√≥n de Wikipedia para todos los equipos"""
    equipos = Equipo.objects.all()
    resultados = {}
    
    for equipo in equipos:
        print(f"\nüîÑ Procesando {equipo.nombre}...")
        info = obtener_info_wikipedia(equipo)
        resultados[equipo.id] = info
    
    return resultados